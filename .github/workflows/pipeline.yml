name: Terraform CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: Terraform Plan, Apply, and Destroy
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: Infrastructure  # ensure this folder exists in your repo root

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_VERSION: 1.13.1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Terraform Plan
        env:
          TF_VAR_redshift_admin_password: ${{ secrets.AWS_REDSHIFT_PASSWORD }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        env:
          TF_VAR_redshift_admin_password: ${{ secrets.AWS_REDSHIFT_PASSWORD }}
        run: terraform apply -auto-approve tfplan

      # Extract the bucket names from Terraform outputs
      - name: Get bucket names
        id: get_bucket_names
        run: |
          BRONZE_BUCKET=$(terraform output -raw bronze_bucket_name)
          echo "bronze_bucket_name=$BRONZE_BUCKET" >> $GITHUB_ENV
          echo "Bronze bucket: $BRONZE_BUCKET"

          SILVER_BUCKET=$(terraform output -raw silver_bucket_name)
          echo "silver_bucket_name=$SILVER_BUCKET" >> $GITHUB_ENV
          echo "Silver bucket: $SILVER_BUCKET"

          SCRIPTS_BUCKET=$(terraform output -raw scripts_bucket_name)
          echo "scripts_bucket_name=$SCRIPTS_BUCKET" >> $GITHUB_ENV
          echo "Scripts bucket: $SCRIPTS_BUCKET"

      # Upload CSV files to S3 Bronze layer
      - name: Upload datasets to S3 Bronze layer
        run: |
          echo "Uploading CSV files to s3://${{ env.bronze_bucket_name }}/"
          aws s3 cp ../Datasets s3://${{ env.bronze_bucket_name }}/ --recursive --exclude "*" --include "*.csv"

      # Upload scripts files to S3 scripts bucket
      - name: Upload scripts to S3 scripts bucket
        run: |
          echo "Uploading script files to s3://${{ env.scripts_bucket_name }}/"
          aws s3 cp ../Scripts s3://${{ env.scripts_bucket_name }}/ --recursive 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./Scripts/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pip dependencies
        run: |
          pip install -r ../Scripts/requirements.txt

      - name: Run script
        env:
          BRONZE_BUCKET: ${{ env.bronze_bucket_name }}
        run: python ../Scripts/Bronze/load_bronze_catalog.py

      - name: Create or Update Silver Layer ETL Glue Job
        run: |
          GLUE_ROLE_ARN=$(terraform output -raw glue_role_arn)
          echo "glue_role_arn=$GLUE_ROLE_ARN" >> $GITHUB_ENV
          echo "Glue ARN: $GLUE_ROLE_ARN"

          JOB_NAME="silver-transform-job"
          SCRIPT_LOCATION="s3://${{ env.scripts_bucket_name }}/Silver/silver_transform.py"
          ROLE_ARN="$GLUE_ROLE_ARN"

          # Check if job exists
          if aws glue get-job --job-name "$JOB_NAME" >/dev/null 2>&1; then
            echo "Updating existing Glue job: $JOB_NAME"
            aws glue update-job \
              --job-name "$JOB_NAME" \
              --job-update "{
                \"Role\": \"$ROLE_ARN\",
                \"Command\": {
                  \"Name\": \"glueetl\",
                  \"PythonVersion\": \"3\",
                  \"ScriptLocation\": \"$SCRIPT_LOCATION\"
                },
                \"DefaultArguments\": {
                  \"--BRONZE_BUCKET\": \"$bronze_bucket_name\",
                  \"--SILVER_BUCKET\": \"$silver_bucket_name\",
                  \"--job-language\": \"python\",
                  \"--enable-metrics\": \"true\",
                  \"--enable-continuous-cloudwatch-log\": \"false\",
                  \"--enable-job-insights\": \"false\"
                },
                \"GlueVersion\": \"5.0\",
                \"NumberOfWorkers\": 2,
                \"WorkerType\": \"G.1X\"
              }"
          else
            echo "Creating new Glue job: $JOB_NAME"
            aws glue create-job \
              --name "$JOB_NAME" \
              --role "$ROLE_ARN" \
              --command "{
                \"Name\": \"glueetl\",
                \"PythonVersion\": \"3\",
                \"ScriptLocation\": \"$SCRIPT_LOCATION\"
              }" \
              --default-arguments "{
                \"--BRONZE_BUCKET\": \"$bronze_bucket_name\",
                \"--SILVER_BUCKET\": \"$silver_bucket_name\",
                \"--job-language\": \"python\",
                \"--enable-metrics\": \"true\",
                \"--enable-continuous-cloudwatch-log\": \"false\",
                \"--enable-job-insights\": \"false\"
              }" \
              --glue-version "5.0" \
              --number-of-workers 2 \
              --worker-type "G.1X"
          fi
        env:
          glue_role_arn: ${{ env.glue_role_arn }}
          bronze_bucket_name: ${{ env.bronze_bucket_name }}
          silver_bucket_name: ${{ env.silver_bucket_name }}
          scripts_bucket_name: ${{ env.scripts_bucket_name }}

      - name: Run Silver Layer ETL Glue Job
        run: |
          RUN_ID=$(aws glue start-job-run \
            --job-name silver-transform-job \
            --query JobRunId --output text)

          echo "Started Glue job: $RUN_ID"

          # Wait for completion
          while true; do
            STATUS=$(aws glue get-job-run --job-name silver-transform-job --run-id "$RUN_ID" --query 'JobRun.JobRunState' --output text)
            echo "Status: $STATUS"
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Glue job succeeded"
              break
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "STOPPED" ]; then
              echo "Glue job failed"
              exit 1
            fi
            sleep 30
          done

      # Terraform Destroy (manual trigger only)
      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch'
        run: terraform destroy -auto-approve